{
  "api/ASE_Assignment.Form1.html": {
    "href": "api/ASE_Assignment.Form1.html",
    "title": "Class Form1 | ASE Assignment",
    "keywords": "Class Form1 Namespace ASE_Assignment Assembly ASE Assignment.dll Represents the main form of the application which interacts with the BOOSE graphics system. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. Sets up the canvas, parser, and other components required for program execution. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment.MainCanvas.html": {
    "href": "api/ASE_Assignment.MainCanvas.html",
    "title": "Class MainCanvas | ASE Assignment",
    "keywords": "Class MainCanvas Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a main canvas that provides various drawing functionalities such as drawing lines, shapes, text, and managing cursor position. Implements the BOOSE.ICanvas interface. public class MainCanvas : ICanvas Inheritance object MainCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainCanvas() Initializes a new instance of the MainCanvas class, setting up the canvas size and initializing cursor settings. public MainCanvas() Properties PenColour Gets or sets the pen's color on the canvas. public object PenColour { get; set; } Property Value object Xpos Gets or sets the current X position of the pen on the canvas. public int Xpos { get; set; } Property Value int Ypos Gets or sets the current Y position of the pen on the canvas. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle at the current pen position with the specified radius. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. filled bool Indicates whether the circle should be filled. Exceptions CanvasException Thrown if the radius is negative. Clear() Clears the canvas by filling it with a gray color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to the specified coordinates. public void DrawTo(int toX, int toY) Parameters toX int The X coordinate to draw the line to. toY int The Y coordinate to draw the line to. Exceptions CanvasException Thrown if the coordinates are outside the canvas bounds. MoveTo(int, int) Moves the pen to the specified coordinates on the canvas. public void MoveTo(int x, int y) Parameters x int The X coordinate to move to. y int The Y coordinate to move to. Exceptions CanvasException Thrown if the coordinates are outside the canvas bounds. Rect(int, int, bool) Draws a rectangle at the current pen position with the specified dimensions. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates whether the rectangle should be filled. Exceptions CanvasException Thrown if the width or height is negative. Reset() Resets the canvas by clearing it and resetting the pen's position. public void Reset() Set(int, int) Sets the size of the canvas. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas. ysize int The height of the canvas. SetColour(int, int, int) Sets the pen's color based on RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color (0-255). green int The green component of the color (0-255). blue int The blue component of the color (0-255). Exceptions CanvasException Thrown if any RGB value is out of range. Tri(int, int) Draws a triangle at the current pen position with the specified dimensions. public void Tri(int width, int height) Parameters width int The width of the triangle base. height int The height of the triangle. Exceptions CanvasException Thrown if the width or height is non-positive. WriteText(string) Writes the specified text at the current pen position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. getBitmap() Gets the bitmap representing the current state of the canvas. public object getBitmap() Returns object The current bitmap of the canvas."
  },
  "api/ASE_Assignment.MyArray.html": {
    "href": "api/ASE_Assignment.MyArray.html",
    "title": "Class MyArray | ASE Assignment",
    "keywords": "Class MyArray Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom array implementation extending the BOOSE Array class and implementing the ICommand interface. public class MyArray : Array, ICommand Inheritance object Command Evaluation Array MyArray Implements ICommand Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ReduceRestrictionCounter() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyArray() Initializes a new instance of the MyArray class. Sets up array restrictions upon creation. public MyArray() Methods ArrayRestrictions() Applies specific array restrictions by invoking the base implementation. public void ArrayRestrictions() CheckParameters(string[]) Validates the parameters passed to the array. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings representing the parameters to be checked. Remarks This method ensures that the provided parameters comply with the requirements of the BOOSE array system by calling the base class implementation. Compile() Compiles the array for execution by invoking the base class method. public override void Compile() Remarks This method prepares the array's internal state for execution. Execute() Executes the commands or operations associated with the array. public override void Execute() Remarks This method executes the compiled array instructions using the base class functionality."
  },
  "api/ASE_Assignment.MyCall.html": {
    "href": "api/ASE_Assignment.MyCall.html",
    "title": "Class MyCall | ASE Assignment",
    "keywords": "Class MyCall Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.Call command, extending its functionality and implementing the BOOSE.ICommand interface. public class MyCall : Call, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Call MyCall Implements ICommand Inherited Members Call.methodName Call.Compile() Call.Execute() CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyCall() Initializes a new instance of the MyCall class. Invokes Call.ReduceRestrictions to relax the restrictions for call execution. public MyCall() Methods CheckParameters(string[]) Checks the parameters passed to the \"call\" operation to ensure they meet the required criteria. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters. Remarks This method invokes the base class implementation of Call.CheckParameters(string[]). Restrictions() Overrides the Call.Restrictions method to apply restrictions for the \"call\" operation. public override void Restrictions() Remarks This method ensures that any restrictions defined in the base BOOSE.Call class are enforced."
  },
  "api/ASE_Assignment.MyCircle.html": {
    "href": "api/ASE_Assignment.MyCircle.html",
    "title": "Class MyCircle | ASE Assignment",
    "keywords": "Class MyCircle Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a circle on the canvas. Inherits from BOOSE.CommandOneParameter. public class MyCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyCircle() Initializes a new instance of the MyCircle class. public MyCircle() MyCircle(Canvas, int) public MyCircle(Canvas c, int radius) Parameters c Canvas radius int Methods CheckParameters(string[]) Checks the parameters for the Circle command. Throws a BOOSE.CommandException if the number of parameters is not 1 or 2. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters passed to the command. It should contain either one or two parameters: the radius and an optional flag. Exceptions CommandException Thrown if the number of parameters is less than 1 or greater than 2. CommandException Thrown if the second parameter is not \"0\" or \"1\" (indicating whether the circle is filled). Execute() Executes the Circle command by calling the Circle(int, bool) method on the canvas with the specified parameters. public override void Execute()"
  },
  "api/ASE_Assignment.MyClear.html": {
    "href": "api/ASE_Assignment.MyClear.html",
    "title": "Class MyClear | ASE Assignment",
    "keywords": "Class MyClear Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to clear the canvas. Inherits from BOOSE.CommandOneParameter. public class MyClear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyClear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyClear() Initializes a new instance of the MyClear class. public MyClear() Methods CheckParameters(string[]) Checks the parameters for the Clear command. Throws a BOOSE.CommandException if any parameters are provided. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters passed to the command. Exceptions CommandException Thrown if any parameter is provided, as the Clear command does not accept arguments. Execute() Executes the Clear command by calling the BOOSE.Canvas.Clear() method on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.MyCommandFactory.html": {
    "href": "api/ASE_Assignment.MyCommandFactory.html",
    "title": "Class MyCommandFactory | ASE Assignment",
    "keywords": "Class MyCommandFactory Namespace ASE_Assignment Assembly ASE Assignment.dll A factory class that creates various command objects based on the command type. Inherits from BOOSE.CommandFactory. public class MyCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory MyCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyCommandFactory() Initializes a new instance of the MyCommandFactory class. public MyCommandFactory() Methods MakeCommand(string) Creates and returns an BOOSE.ICommand instance based on the specified command type. public override ICommand MakeCommand(string commandType) Parameters commandType string The command type as a string. This value is case-insensitive and will be trimmed. Supported command types include: \"tri\" - Creates a MyTriangle command. \"write\" - Creates a MyWrite command. \"int\" - Creates a MyInt command. \"reset\" - Creates a MyReset command. \"clear\" - Creates a MyClear command. \"real\" - Creates a MyReal command. \"circle\" - Creates a MyCircle command. \"moveto\" - Creates a MyMoveTo command. \"drawto\" - Creates a MyDrawTo command. \"pen\" - Creates a MySetColour command. \"rect\" - Creates a MyRect command. \"array\" - Creates a MyArray command. \"if\" - Creates a MyIf command. \"else\" - Creates a MyElse command. \"end\" - Creates a MyEnd command. \"method\" - Creates a MyMethod command. \"for\" - Creates a MyFor command. \"while\" - Creates a MyWhile command. \"peek\" - Creates a MyPeek command. \"poke\" - Creates a MyPoke command. \"call\" - Creates a MyCall command. Returns ICommand An instance of a class implementing BOOSE.ICommand for the given command type. Exceptions CommandException Thrown if the command type is not recognized and cannot be handled by the base class."
  },
  "api/ASE_Assignment.MyDrawTo.html": {
    "href": "api/ASE_Assignment.MyDrawTo.html",
    "title": "Class MyDrawTo | ASE Assignment",
    "keywords": "Class MyDrawTo Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that draws a line to a specified position on the canvas. Inherits from BOOSE.CommandTwoParameters. public class MyDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyDrawTo() Initializes a new instance of the MyDrawTo class. public MyDrawTo() Methods CheckParameters(string[]) Checks the parameters for the DrawTo command. Throws a BOOSE.CommandException if the number of parameters is not exactly two. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The array of parameters passed to the command, which should contain two integers: X and Y coordinates. Exceptions CommandException Thrown if the number of parameters is less than or more than two. Execute() Executes the DrawTo command by calling the base execute method and passing the parameters to draw a line to the specified coordinates on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.MyElse.html": {
    "href": "api/ASE_Assignment.MyElse.html",
    "title": "Class MyElse | ASE Assignment",
    "keywords": "Class MyElse Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.Else command. This class provides an opportunity to modify or extend the behavior of the base BOOSE.Else class. public class MyElse : Else, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Else MyElse Implements ICommand Inherited Members Else.Compile() Else.Execute() Else.CorrespondingEnd CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Checks the parameters for the \"else\" command to ensure they meet the required criteria. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters. Remarks This method invokes the base class implementation of CheckParameters(string[]) to validate the provided parameters. Restrictions() Overrides the Else.Restrictions method to specify custom restrictions for the \"else\" command. public override void Restrictions() Remarks This method is intended to be used for applying or relaxing restrictions specific to the \"else\" command. Currently, it provides no additional functionality, but it can be extended as needed."
  },
  "api/ASE_Assignment.MyEnd.html": {
    "href": "api/ASE_Assignment.MyEnd.html",
    "title": "Class MyEnd | ASE Assignment",
    "keywords": "Class MyEnd Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.End command. This class allows for the extension or modification of the behavior associated with the \"end\" command. public class MyEnd : End, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand End MyEnd Implements ICommand Inherited Members End.Compile() End.Execute() CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the \"end\" command to ensure they adhere to the required specifications. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters. Remarks This method leverages the base class implementation of End.CheckParameters(string[]) for parameter validation. Restrictions() Overrides the End.Restrictions method to define or modify restrictions for the \"end\" command. public override void Restrictions() Remarks This method is currently empty, providing a placeholder for potential future custom restrictions."
  },
  "api/ASE_Assignment.MyFor.html": {
    "href": "api/ASE_Assignment.MyFor.html",
    "title": "Class MyFor | ASE Assignment",
    "keywords": "Class MyFor Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.For command. This class allows for extending or modifying the behavior of the \"for\" command. public class MyFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For MyFor Implements ICommand Inherited Members For.Compile() For.Execute() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters passed to the \"for\" command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters. Remarks This method invokes the base class implementation of For.CheckParameters(string[]) to ensure that the parameters are correctly formatted. Restrictions() Overrides the For.Restrictions method to define or modify restrictions for the \"for\" command. public override void Restrictions() Remarks This method is currently empty, but it can be extended to add custom restrictions for the \"for\" loop."
  },
  "api/ASE_Assignment.MyIf.html": {
    "href": "api/ASE_Assignment.MyIf.html",
    "title": "Class MyIf | ASE Assignment",
    "keywords": "Class MyIf Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.If command. This class allows for extending or modifying the behavior of the \"if\" command. public class MyIf : If, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand If MyIf Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyIf() Initializes a new instance of the MyIf class. Reduces restrictions for the \"if\" command by calling the base class method. public MyIf() Methods CheckParameters(string[]) Checks and validates the parameters passed to the \"if\" command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters. Remarks This method calls the base class implementation of If.CheckParameters(string[]) to validate the provided parameters. Restrictions() Overrides the If.Restrictions method to define or modify restrictions for the \"if\" command. public override void Restrictions() Remarks This method is currently empty, providing a placeholder for potential future custom restrictions."
  },
  "api/ASE_Assignment.MyInt.html": {
    "href": "api/ASE_Assignment.MyInt.html",
    "title": "Class MyInt | ASE Assignment",
    "keywords": "Class MyInt Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that handles an integer value. This class inherits from BOOSE.Int and implements BOOSE.ICommand. It provides methods to compile and execute commands related to integer variables. public class MyInt : Int, ICommand Inheritance object Command Evaluation Int MyInt Implements ICommand Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyInt() Initializes a new instance of the MyInt class. Sets the initial restriction count to zero and applies default restrictions. public MyInt() Methods Compile() Compiles the integer variable, adding it to the program's variable list. This method prepares the variable for execution within the program. public override void Compile() Execute() Executes the command, parsing and updating the integer variable. Validates that the evaluated expression is a valid integer. public override void Execute() Exceptions StoredProgramException Thrown when the evaluated expression cannot be converted to an integer. Restrictions() Applies restrictions or validations for the integer variable. This method can be overridden to introduce custom restrictions. public override void Restrictions()"
  },
  "api/ASE_Assignment.MyMethod.html": {
    "href": "api/ASE_Assignment.MyMethod.html",
    "title": "Class MyMethod | ASE Assignment",
    "keywords": "Class MyMethod Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.Method command. This class extends the behavior of the \"method\" command and implements the BOOSE.ICommand interface. public class MyMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method MyMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyMethod() Initializes a new instance of the MyMethod class. Reduces restrictions for the \"method\" command by calling the base class method. public MyMethod() Methods Restrictions() Overrides the Method.Restrictions method to define or modify restrictions for the \"method\" command. public override void Restrictions() Remarks This method calls the base class implementation of Method.Restrictions to enforce any restrictions defined in the base class."
  },
  "api/ASE_Assignment.MyMoveTo.html": {
    "href": "api/ASE_Assignment.MyMoveTo.html",
    "title": "Class MyMoveTo | ASE Assignment",
    "keywords": "Class MyMoveTo Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that moves the drawing cursor to a specified position on the canvas. Inherits from BOOSE.CommandTwoParameters. public class MyMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyMoveTo() Initializes a new instance of the MyMoveTo class. public MyMoveTo() Methods CheckParameters(string[]) Checks the parameters for the MoveTo command. Throws a BOOSE.CommandException if there are fewer than two or more than two parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The array of parameters provided to the command, which should contain two integers: X and Y coordinates. Exceptions CommandException Thrown if the number of parameters is not exactly two. Execute() Executes the MoveTo command by calling the base execute method and passing the necessary parameters to move the cursor on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.MyPeek.html": {
    "href": "api/ASE_Assignment.MyPeek.html",
    "title": "Class MyPeek | ASE Assignment",
    "keywords": "Class MyPeek Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.Peek command. This class extends the behavior of the \"peek\" command and implements the BOOSE.ICommand interface. public class MyPeek : Peek, ICommand Inheritance object Command Evaluation Array Peek MyPeek Implements ICommand Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyPeek() Initializes a new instance of the MyPeek class. Reduces the restriction counter for the \"peek\" command by calling the base class method. public MyPeek() Methods CheckParameters(string[]) Validates the parameters passed to the \"peek\" command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings representing the parameters. Remarks This method calls the base class implementation of CheckParameters(string[]) to validate the provided parameters. Compile() Compiles the \"peek\" command. public override void Compile() Remarks This method calls the base class implementation of BOOSE.Peek.Compile() to perform compilation. Execute() Executes the \"peek\" command. public override void Execute() Remarks This method calls the base class implementation of BOOSE.Peek.Execute() to perform execution."
  },
  "api/ASE_Assignment.MyPoke.html": {
    "href": "api/ASE_Assignment.MyPoke.html",
    "title": "Class MyPoke | ASE Assignment",
    "keywords": "Class MyPoke Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.Poke command. This class extends the behavior of the \"poke\" command and implements the BOOSE.ICommand interface. public class MyPoke : Poke, ICommand Inheritance object Command Evaluation Array Poke MyPoke Implements ICommand Inherited Members Poke.Set(StoredProgram, string) Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyPoke() Initializes a new instance of the MyPoke class. Reduces the restriction counter for the \"poke\" command by calling the base class method. public MyPoke() Methods CheckParameters(string[]) Validates the parameters passed to the \"poke\" command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings representing the parameters. Remarks This method calls the base class implementation of CheckParameters(string[]) to validate the provided parameters. Compile() Compiles the \"poke\" command. public override void Compile() Remarks This method calls the base class implementation of BOOSE.Poke.Compile() to perform compilation. Execute() Executes the \"poke\" command. public override void Execute() Remarks This method calls the base class implementation of BOOSE.Poke.Execute() to perform execution."
  },
  "api/ASE_Assignment.MyReal.html": {
    "href": "api/ASE_Assignment.MyReal.html",
    "title": "Class MyReal | ASE Assignment",
    "keywords": "Class MyReal Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that handles a real number value. Inherits from BOOSE.Evaluation and implements BOOSE.ICommand. public class MyReal : Real, ICommand Inheritance object Command Evaluation Real MyReal Implements ICommand Inherited Members Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyReal() Initializes a new instance of the MyReal class. public MyReal() Methods Compile() Compiles the real variable, adding it to the program's variable list. This method prepares the variable for execution within the program. public override void Compile() Execute() Executes the command, parsing and updating the real variable. Validates that the evaluated expression is a valid double. public override void Execute() Exceptions StoredProgramException Thrown when the evaluated expression cannot be converted to a double. Restrictions() Applies restrictions or validations for the real variable. This method can be overridden to introduce custom restrictions. public override void Restrictions()"
  },
  "api/ASE_Assignment.MyRect.html": {
    "href": "api/ASE_Assignment.MyRect.html",
    "title": "Class MyRect | ASE Assignment",
    "keywords": "Class MyRect Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that draws a rectangle on the canvas. Inherits from BOOSE.CommandThreeParameters. public class MyRect : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters MyRect Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyRect() Initializes a new instance of the MyRect class. public MyRect() Methods CheckParameters(string[]) Checks the parameters for the DrawRect command. Throws a BOOSE.CommandException if there are fewer than two parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The array of parameters provided to the command, which should contain coordinates and dimensions. Exceptions CommandException Thrown if the third parameter is not \"0\" or \"1\" (indicating whether the rectangle is filled). Execute() Executes the DrawRect command by calling the base execute method and passing the necessary parameters to draw a rectangle on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.MyReset.html": {
    "href": "api/ASE_Assignment.MyReset.html",
    "title": "Class MyReset | ASE Assignment",
    "keywords": "Class MyReset Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that resets the canvas. Inherits from BOOSE.CommandOneParameter. public class MyReset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyReset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyReset() Initializes a new instance of the MyReset class. public MyReset() Methods CheckParameters(string[]) Checks the parameters for the Reset command. Throws a BOOSE.CommandException if any parameters are provided, as the Reset command does not take any arguments. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The array of parameters provided to the command. Execute() Executes the Reset command by calling the base execute method and invoking the BOOSE.Canvas.Reset() method to reset the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.MySetColour.html": {
    "href": "api/ASE_Assignment.MySetColour.html",
    "title": "Class MySetColour | ASE Assignment",
    "keywords": "Class MySetColour Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that sets the color on the canvas. Inherits from BOOSE.CommandThreeParameters. public class MySetColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters MySetColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MySetColour() Initializes a new instance of the MySetColour class. public MySetColour() Methods CheckParameters(string[]) Checks the parameters for the SetColour command. Throws a BOOSE.CommandException if there are fewer than three parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The array of parameters provided to the command, which should contain RGB values. Execute() Executes the SetColour command by calling the base execute method and passing the color parameters (Red, Green, Blue) to the canvas to set the color. public override void Execute()"
  },
  "api/ASE_Assignment.MyStoredProgram.html": {
    "href": "api/ASE_Assignment.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE Assignment",
    "keywords": "Class MyStoredProgram Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.StoredProgram class. This class overrides the Run() method to execute the stored program commands. public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.SyntaxOk StoredProgram.AddMethod(Method) StoredProgram.GetMethod(string) StoredProgram.AddVariable(Evaluation) StoredProgram.GetVariable(string) StoredProgram.GetVariable(int) StoredProgram.FindVariable(Evaluation) StoredProgram.FindVariable(string) StoredProgram.VariableExists(string) StoredProgram.GetVarValue(string) StoredProgram.UpdateVariable(string, int) StoredProgram.UpdateVariable(string, double) StoredProgram.UpdateVariable(string, bool) StoredProgram.DeleteVariable(string) StoredProgram.IsExpression(string) StoredProgram.EvaluateExpressionWithString(string) StoredProgram.EvaluateExpression(string) StoredProgram.Push(ConditionalCommand) StoredProgram.Pop() StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.ResetProgram() StoredProgram.Commandsleft() StoredProgram.PC ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) Initializes a new instance of the MyStoredProgram class. public MyStoredProgram(ICanvas canvas) Parameters canvas ICanvas The canvas to which the program's output is drawn. Methods Run() Runs the stored program by executing all commands until no commands are left. public override void Run() Remarks This method overrides the base BOOSE.StoredProgram.Run() method and ensures that commands are executed one by one as long as there are remaining commands to execute."
  },
  "api/ASE_Assignment.MyTriangle.html": {
    "href": "api/ASE_Assignment.MyTriangle.html",
    "title": "Class MyTriangle | ASE Assignment",
    "keywords": "Class MyTriangle Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command to draw a triangle on the canvas. Inherits from BOOSE.CommandTwoParameters. public class MyTriangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyTriangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyTriangle() Initializes a new instance of the MyTriangle class. public MyTriangle() Methods CheckParameters(string[]) Validates the parameters provided for the triangle drawing command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters that represent the input values for drawing the triangle. Remarks This method calls the base class's CheckParameters(string[]) method to validate the parameters. The parameters must be valid integers to draw the triangle correctly. Execute() Executes the triangle drawing command by invoking the base execution method and passing parameters to draw a triangle on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment.MyWhile.html": {
    "href": "api/ASE_Assignment.MyWhile.html",
    "title": "Class MyWhile | ASE Assignment",
    "keywords": "Class MyWhile Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a custom implementation of the BOOSE.While command. This class allows for extending or modifying the behavior associated with the \"while\" command. public class MyWhile : While, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand While MyWhile Implements ICommand Inherited Members CompoundCommand.ReduceRestrictions() CompoundCommand.Compile() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyWhile() Initializes a new instance of the MyWhile class. Reduces restrictions for the \"while\" command execution by invoking the base class method. public MyWhile() Methods CheckParameters(string[]) Overrides the While.CheckParameters method to validate the provided parameters. public override void CheckParameters(string[] parameter) Parameters parameter string[] The parameters to check for the \"while\" command. Restrictions() Overrides the While.Restrictions method to define or modify restrictions for the \"while\" command. public override void Restrictions() Remarks This method is currently empty, providing a placeholder for potential future custom restrictions."
  },
  "api/ASE_Assignment.MyWrite.html": {
    "href": "api/ASE_Assignment.MyWrite.html",
    "title": "Class MyWrite | ASE Assignment",
    "keywords": "Class MyWrite Namespace ASE_Assignment Assembly ASE Assignment.dll Represents a command that writes text to the canvas. Inherits from BOOSE.CommandOneParameter. public class MyWrite : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyWrite Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyWrite() Initializes a new instance of the MyWrite class. This constructor is used when no parameters are provided initially. public MyWrite() MyWrite(Canvas, string) Initializes a new instance of the MyWrite class. public MyWrite(Canvas c, string text) Parameters c Canvas The BOOSE.Canvas object on which the text will be written. text string The text to be written to the canvas. Methods CheckParameters(string[]) Checks the parameters for the Write command. If the parameter list contains a text, it sets the ASE_Assignment.MyWrite.text property. Throws a BOOSE.CommandException if no text is provided. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The array of parameters provided to the command. Execute() Executes the Write command to write the text to the canvas. Throws a BOOSE.CommandException if the text is null or empty. public override void Execute()"
  },
  "api/ASE_Assignment.Program.html": {
    "href": "api/ASE_Assignment.Program.html",
    "title": "Class Program | ASE Assignment",
    "keywords": "Class Program Namespace ASE_Assignment Assembly ASE Assignment.dll public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ASE_Assignment.html": {
    "href": "api/ASE_Assignment.html",
    "title": "Namespace ASE_Assignment | ASE Assignment",
    "keywords": "Namespace ASE_Assignment Classes Form1 Represents the main form of the application which interacts with the BOOSE graphics system. MainCanvas Represents a main canvas that provides various drawing functionalities such as drawing lines, shapes, text, and managing cursor position. Implements the BOOSE.ICanvas interface. MyArray Represents a custom array implementation extending the BOOSE Array class and implementing the ICommand interface. MyCall Represents a custom implementation of the BOOSE.Call command, extending its functionality and implementing the BOOSE.ICommand interface. MyCircle Represents a command to draw a circle on the canvas. Inherits from BOOSE.CommandOneParameter. MyClear Represents a command to clear the canvas. Inherits from BOOSE.CommandOneParameter. MyCommandFactory A factory class that creates various command objects based on the command type. Inherits from BOOSE.CommandFactory. MyDrawTo Represents a command that draws a line to a specified position on the canvas. Inherits from BOOSE.CommandTwoParameters. MyElse Represents a custom implementation of the BOOSE.Else command. This class provides an opportunity to modify or extend the behavior of the base BOOSE.Else class. MyEnd Represents a custom implementation of the BOOSE.End command. This class allows for the extension or modification of the behavior associated with the \"end\" command. MyFor Represents a custom implementation of the BOOSE.For command. This class allows for extending or modifying the behavior of the \"for\" command. MyIf Represents a custom implementation of the BOOSE.If command. This class allows for extending or modifying the behavior of the \"if\" command. MyInt Represents a command that handles an integer value. This class inherits from BOOSE.Int and implements BOOSE.ICommand. It provides methods to compile and execute commands related to integer variables. MyMethod Represents a custom implementation of the BOOSE.Method command. This class extends the behavior of the \"method\" command and implements the BOOSE.ICommand interface. MyMoveTo Represents a command that moves the drawing cursor to a specified position on the canvas. Inherits from BOOSE.CommandTwoParameters. MyPeek Represents a custom implementation of the BOOSE.Peek command. This class extends the behavior of the \"peek\" command and implements the BOOSE.ICommand interface. MyPoke Represents a custom implementation of the BOOSE.Poke command. This class extends the behavior of the \"poke\" command and implements the BOOSE.ICommand interface. MyReal Represents a command that handles a real number value. Inherits from BOOSE.Evaluation and implements BOOSE.ICommand. MyRect Represents a command that draws a rectangle on the canvas. Inherits from BOOSE.CommandThreeParameters. MyReset Represents a command that resets the canvas. Inherits from BOOSE.CommandOneParameter. MySetColour Represents a command that sets the color on the canvas. Inherits from BOOSE.CommandThreeParameters. MyStoredProgram Represents a custom implementation of the BOOSE.StoredProgram class. This class overrides the Run() method to execute the stored program commands. MyTriangle Represents a command to draw a triangle on the canvas. Inherits from BOOSE.CommandTwoParameters. MyWhile Represents a custom implementation of the BOOSE.While command. This class allows for extending or modifying the behavior associated with the \"while\" command. MyWrite Represents a command that writes text to the canvas. Inherits from BOOSE.CommandOneParameter. Program"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Assignment",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Assignment",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Assignment",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}